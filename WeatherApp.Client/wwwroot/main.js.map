{"version":3,"sources":["./src/app/weather-card/weathercard.ts","./src/app/weather-image.service.ts","./src/environments/environment.ts","./src/app/weather-table/weather-table.component.ts","./src/app/weather-table/weather-table.component.html","./src/app/weather-data.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/location.service.ts","./src/app/app.module.ts","./src/app/configuration.service.ts","./src/app/weather-card/weather-card.component.ts","./src/app/weather-card/weather-card.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["export class WeatherCard {\r\n\r\n  constructor(\r\n    dayOfWeek: string,\r\n    temperature: number,\r\n    iconShortHand: string,\r\n    isCurrentDayOfWeek: boolean\r\n    )\r\n  {\r\n    this.dayOfWeek = dayOfWeek;\r\n    this.temperature = temperature;\r\n    this.iconShortHand = iconShortHand;\r\n    this.isCurrentDayOfWeek = isCurrentDayOfWeek;\r\n  }\r\n\r\n  dayOfWeek: string;\r\n  temperature: number;\r\n  iconShortHand: string;\r\n  isCurrentDayOfWeek: boolean;\r\n}\r\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherImageService {\n\n  constructor() { }\n  getWeatherImageUrl(iconShortHand: string): string {\n    return \"https://www.metaweather.com/static/img/weather/png/\"\r\n      + iconShortHand\r\n      + \".png\";\r\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\r\nimport { LocationItem } from '../location-item';\r\nimport { WeatherData } from '../weather-data';\r\nimport { WeatherDataService } from '../weather-data.service';\r\nimport { WeatherResponse } from '../weather-response';\r\n\n@Component({\n  selector: 'app-weather-table',\n  templateUrl: './weather-table.component.html',\n  styleUrls: ['./weather-table.component.scss']\n})\nexport class WeatherTableComponent implements OnInit {\n\n  constructor(private weatherDataService: WeatherDataService) {\n    this.weatherData = new Array<WeatherData>();\n    this.locations = new Observable<Array<LocationItem>>();\n\n    const baseUrl = sessionStorage\n      .getItem(\"baseApiUrl\");\n\n    if (baseUrl === null) {\n      throw \"baseUrl not available\"\r\n    }\n\n    this.baseApiUrl = baseUrl;\n  }\n\n  ngOnInit(): void {\n    console.log(this.locations, \"WeatherTableComponent.ngOnInit\");\n    const context = this;\n\n    this.locations\n      .subscribe({\n        next(locations: Array<LocationItem>) {\n          context\n            .getWeatherData(locations) }\n      }); \n  }\n\n  getWeatherData(locations: Array<LocationItem>) {\n    const result = this.weatherDataService.getWeatherData(\n      this.baseApiUrl,\n      locations[0],\n      new Date(),\n      new Date());\r\n\r\n    console.log(result);\r\n    const context = this;\n\r\n    result\r\n      .subscribe({\r\n        next(weatherResponse: WeatherResponse) {\r\n          context.weatherData = weatherResponse.weatherForecast; } });\r\n  }\n\n  baseApiUrl: string;\n  weatherData: Array<WeatherData>;\n  @Input() locations: Observable<Array<LocationItem>>\n}\n","  <div class=\"row\">\r\n    <div class=\"col\" *ngFor=\"let weatherDataItem of weatherData\">\r\n      <app-weather-card></app-weather-card>\r\n    </div>\r\n  </div>\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { ConfigurationService } from './configuration.service';\r\nimport { WeatherResponse } from './weather-response';\r\nimport { LocationItem } from './location-item';\r\nimport { Observable } from 'rxjs';\r\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherDataService {\n\n  constructor(private httpClient: HttpClient,\n    private configurationService: ConfigurationService) { }\n\n  getWeatherData(\n    baseUrl: string,\n    locationItem: LocationItem,\n    fromDate: Date,\n    toDate: Date): Observable<WeatherResponse> {\n    const fromDateParameter = fromDate.toISOString();\n    const toDateParameter = toDate.toISOString();\n    const id = locationItem.id.toString();\n\n    const headers = this\n      .configurationService\n      .getHttpHeaders();\n\n    const params = new HttpParams({ fromObject:\n      { id, fromDateParameter, toDateParameter } });\n\n    const response = this.httpClient.get<WeatherResponse>(\n      baseUrl + this.getWeatherForecast,\n      { headers, params } );\r\n\r\n    return response;\r\n  }\n\n  private getWeatherForecast = \"weather\";\n}\n","import { Component, ElementRef } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map, filter, catchError, mergeMap } from 'rxjs/operators';\r\nimport { LocationItem } from './location-item';\r\nimport { LocationResponse } from './location-response';\r\nimport { LocationService } from './location.service';\r\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'Weather App';\n\n  constructor(\n    private eltRef: ElementRef,\n    private locationService: LocationService) {\n    const nativeElement = eltRef.nativeElement;\r\n\r\n    this.baseApiUrl = nativeElement.getAttribute('baseapiurl');\r\n    this.query = nativeElement.getAttribute('query');\r\n\r\n    this.searchLocations = new Observable<Array<LocationItem>>();\r\n\r\n    sessionStorage.setItem(\r\n      \"baseApiUrl\",\r\n      this.baseApiUrl);\r\n  }\n\n  ngOnInit() {\r\n    const result = this.locationService.getLocation(\n      this.baseApiUrl,\n      this.query);\n\n    this.searchLocations = result.pipe(map((locationResponse: LocationResponse) => locationResponse.locations));\n  }\n  searchLocations: Observable<Array<LocationItem>> \n  baseApiUrl: string;\n  query: string;\n}\n","<div class=\"container\">\r\n  <h1>Weather forecast for Belfast</h1>\r\n  <app-weather-table [locations]=\"searchLocations\"></app-weather-table>\r\n</div>\r\n","import { Injectable } from '@angular/core';\nimport { LocationResponse } from './location-response';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { ConfigurationService } from './configuration.service';\r\nimport { Observable } from 'rxjs';\r\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocationService {\n\n  constructor(\n    private httpService: HttpClient,\n    private configurationService: ConfigurationService) {\n    \n  }\n\n  getLocation(\n    baseUrl: string,\n    query: string): Observable<LocationResponse> {\n    \r\n    const params = new HttpParams({ fromObject: { query } });\r\n\r\n    const headers = this\r\n      .configurationService\r\n      .getHttpHeaders();\r\n\r\n    const response = this.httpService\r\n      .get<LocationResponse>(baseUrl + this.getLocationUrl,\r\n        { headers, params } );\r\n\r\n    return response;\r\n  }\n\n  private getLocationUrl = \"location\";\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { HttpClientModule } from '@angular/common/http'\n\nimport { AppComponent } from './app.component';\nimport { WeatherTableComponent } from './weather-table/weather-table.component';\nimport { WeatherCardComponent } from './weather-card/weather-card.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    WeatherTableComponent,\n    WeatherCardComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule \n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigurationService {\n\n  constructor() { }\n  getHttpHeaders(): HttpHeaders {\r\n    return new HttpHeaders()\r\n      .set(\"x-api-key\", \"YzgzMzgyNjAtOTg3NC00ZTA4LWFiZDAtN2E3ZWZlM2Y2OTY4\");\r\n  }\n}\n","import { Input, Component, OnInit } from '@angular/core';\nimport { WeatherImageService } from '../weather-image.service';\r\nimport { WeatherCard } from './weathercard';\r\nimport { WeatherData } from '../weather-data';\r\nimport { Observable } from 'rxjs';\r\n\n@Component({\n  selector: 'app-weather-card',\n  templateUrl: './weather-card.component.html',\n  styleUrls: ['./weather-card.component.scss']\n})\nexport class WeatherCardComponent implements OnInit {\n\n  constructor(private weatherImageService: WeatherImageService) {\n    this.model = new WeatherCard(\"NAN\", 0, \"sn\", false);\n    this.weather = new Observable<WeatherData>();\n  }\n\n  ngOnInit(): void {\n    \n  }\n\n  getWeatherImage(): string {\n    return this.weatherImageService\r\n      .getWeatherImageUrl(this.model.iconShortHand);\r\n  }\n\n  @Input() weather: Observable<WeatherData>;\n  model: WeatherCard\n}\n","<div class=\"card weather-card\">\r\n  <div class=\"card-header\">\r\n    {{ model.dayOfWeek }}\r\n  </div>\r\n  <img [src]=\"getWeatherImage()\" class=\"card-img-top\" alt=\"...\">\r\n  <div class=\"card-body\">\r\n    <h5 class=\"card-title  text-center\">{{model.temperature}} &deg;C</h5>\r\n  </div>\r\n</div>\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}